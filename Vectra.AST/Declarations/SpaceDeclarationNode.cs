using Vectra.AST.Declarations.Interfaces;
using Vectra.AST.Models;

namespace Vectra.AST.Declarations;

/// <summary>
/// Represents a declaration of a namespace or logical grouping in the abstract syntax tree (AST).
/// </summary>
/// <remarks>
/// This class encapsulates a hierarchical structure of declarations, allowing for nested namespaces
/// or grouped declarations. Each instance can reference child spaces and contains a list of type declarations.
/// </remarks>
public class SpaceDeclarationNode
{
    /// <summary>
    /// Gets the name of the space declared by this node.
    /// </summary>
    /// <remarks>
    /// The <c>Name</c> property represents the identifier associated with the current
    /// space declaration within the abstract syntax tree (AST). This is a unique name
    /// within the context of its parent space.
    /// </remarks>
    public string Name { get; }

    /// <summary>
    /// Gets the fully qualified name of the space declaration, providing a hierarchical name
    /// constructed from its parent spaces and its own name.
    /// </summary>
    /// <remarks>
    /// The qualified name is generated by concatenating the names of the parent spaces,
    /// separated by a dot (.), followed by the name of the current space. If the space
    /// does not have a parent, its name is returned as the qualified name. This property
    /// is useful for identifying a space declaration uniquely within the abstract syntax tree.
    /// </remarks>
    public string QualifiedName => $"{_parent?.Name}{(_parent == null ? string.Empty : '.')}{Name}";

    /// <summary>
    /// Gets the collection of type declaration nodes this space contains.
    /// </summary>
    /// <remarks>
    /// The Declarations property provides access to the immediate type declarations
    /// within the current space. These types may represent classes, interfaces, or
    /// other forms of type declarations defined in the space.
    /// </remarks>
    /// <value>
    /// A list of <see cref="ITypeDeclarationNode"/> objects, representing the type
    /// declarations defined in this space.
    /// </value>
    public List<ITypeDeclarationNode> Declarations { get; }

    /// <summary>
    /// Gets the span of the source code associated with this node.
    /// </summary>
    /// <remarks>
    /// The <c>Span</c> property represents the range of source code that corresponds
    /// to this <see cref="SpaceDeclarationNode"/> instance. It provides the starting
    /// and ending positions (line and column) of the associated code segment. This
    /// property is useful for tracking the location of this node in the source code
    /// for diagnostic and tooling purposes.
    /// </remarks>
    public SourceSpan Span { get; }

    /// <summary>
    /// Gets the collection of child spaces associated with the current space declaration.
    /// </summary>
    /// <remarks>
    /// This property provides access to a list of nested space declarations that are hierarchically
    /// contained within the current space. Child spaces represent subspaces within the structure
    /// of the abstract syntax tree (AST) and can be used to model nested namespaces or similarly
    /// organized structures.
    /// </remarks>
    /// <value>
    /// A <see cref="List{T}"/> of <see cref="SpaceDeclarationNode"/> instances representing child spaces
    /// within the current space declaration.
    /// </value>
    public List<SpaceDeclarationNode> ChildSpaces { get; } = [];

    /// <summary>
    /// Represents the parent <see cref="SpaceDeclarationNode"/> of the current node.
    /// </summary>
    /// <remarks>
    /// This field holds a reference to the containing space declaration node, if one exists.
    /// It is used to determine the hierarchical relationship between space declarations
    /// and construct qualified names for nested spaces. If the current node is a root
    /// (has no parent), this will be null.
    /// </remarks>
    private readonly SpaceDeclarationNode? _parent;

    /// <summary>
    /// Represents a namespace or a structural grouping of declarations within the abstract syntax tree (AST).
    /// </summary>
    /// <remarks>
    /// The <see cref="SpaceDeclarationNode"/> is used to organize a hierarchy of type declarations and subspaces
    /// within a programming language's AST. It supports nesting of namespaces and provides qualified naming.
    /// </remarks>
    public SpaceDeclarationNode(string name, List<ITypeDeclarationNode> declarations, SourceSpan span,
        SpaceDeclarationNode? parent)
    {
        Name = name;
        Declarations = declarations;
        Span = span;
        _parent = parent;
        _parent?.ChildSpaces.Add(this);
    }
}